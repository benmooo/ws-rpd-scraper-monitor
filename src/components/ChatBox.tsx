import { useEffect, useRef } from "react";
import { Message, MessageType, useStore } from "../store";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Card, CardContent, CardFooter, CardHeader } from "./ui/card";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  // FormMessage,
} from "./ui/form";
import { useForm } from "react-hook-form";
import { Send } from "lucide-react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Skeleton } from "./ui/skeleton";
import { ScrollArea } from "./ui/scroll-area";
import MessageBubble from "./MessageBubble";
import { Avatar } from "@radix-ui/react-avatar";
import { AvatarFallback } from "./ui/avatar";

const formSchema = z.object({
  message: z
    .string()
    .min(1, { message: "message must not be null" })
    .max(100, { message: "message have 100 characters at most" }),
});

function ChatBox() {
  const { socket, messageList, appendMessage, clientId, setClientId } =
    useStore();
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(scrollToBottom, [messageList]);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      message: "",
    },
  });

  const onSubmit = (data: z.infer<typeof formSchema>) => {
    socket.send(data.message);
    form.resetField("message");
  };

  const handleSocketMessage = (e: MessageEvent<any>) => {
    const message = JSON.parse(e.data) as Message;
    if (message.type === MessageType.HelloClient) {
      if (clientId) return;
      setClientId(message.payload.client!.id);
    }
    appendMessage(message);
  };

  useEffect(() => {
    socket.addEventListener("message", handleSocketMessage);

    return () => {
      socket.removeEventListener("message", handleSocketMessage);
    };
  }, []);

  return (
    <div>
      <Card>
        <CardHeader>
          <div className="flex items-center space-x-4">
            {(!clientId && (
              <>
                <Skeleton className="h-12 w-12 rounded-full" />
                <div className="space-y-2">
                  <Skeleton className="h-4 w-[250px]" />
                  <Skeleton className="h-4 w-[200px]" />
                </div>
              </>
            )) || (
              <>
                <Avatar>
                  <AvatarFallback className="w-12 h-12 text-lg font-bold rounded-full">
                    {clientId?.slice(0, 2)}
                  </AvatarFallback>
                </Avatar>

                <div className="space-y-2">
                  <p className="text-xs font-light">client id: {clientId}</p>
                  <p className="text-xs font-light">
                    The client ID was generated by server.
                  </p>
                </div>
              </>
            )}
          </div>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-[30rem]">
            <div className="">
              {(messageList.length === 0 && (
                <div className="space-y-2">
                  <Skeleton className="h-10 w-[200px]" />
                  <Skeleton className="h-10 w-[200px] ml-auto " />
                  <Skeleton className="h-10 w-[200px]" />
                </div>
              )) || (
                <div className="space-y-2 mt-4 min-h-[20rem]">
                  {messageList.map((msg, index) => {
                    return (
                      <MessageBubble key={index} msg={msg}></MessageBubble>
                    );
                  })}
                </div>
              )}
              <div></div>
              <div ref={messagesEndRef} />
            </div>
          </ScrollArea>
        </CardContent>
        <CardFooter>
          <Form {...form}>
            <form className="w-full" onSubmit={form.handleSubmit(onSubmit)}>
              <div className="flex space-x-2">
                <FormField
                  control={form.control}
                  name="message"
                  render={({ field }) => (
                    <FormItem className="flex-1">
                      <FormControl>
                        <Input
                          className="placeholder:font-light"
                          placeholder="It's all about sending a message."
                          {...field}
                        ></Input>
                      </FormControl>
                      <FormDescription></FormDescription>
                      {/* <FormMessage className="text-xs ml-2"></FormMessage> */}
                    </FormItem>
                  )}
                ></FormField>
                <Button type="submit" size={"icon"}>
                  <Send className="w-4 h-4"></Send>
                </Button>
              </div>
            </form>
          </Form>
        </CardFooter>
      </Card>
    </div>
  );
}

export default ChatBox;
